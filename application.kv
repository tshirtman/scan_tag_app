#:import Path pathlib.Path
#:import datetime datetime.datetime
#:import A kivy.animation.Animation
#:import is_android zbarcam.utils.is_android
#:import F kivy.factory.Factory

ScreenManager:
    EntriesScreen:
    EntryEditor:


<ZBarCamPopup@Popup>:
    BoxLayout:
        orientation: "vertical"
        ZBarCam:
            id: zbarcam
        RecycleView:
            viewclass: "ZBarSelectButton"
            data: [{"text": value.data.decode("utf8"), "popup": root} for value in zbarcam.symbols]
            RecycleBoxLayout:
                size_hint_y: None
                height: self.minimum_height
                default_size_hint: 1, None
                default_size: 0, "40dp"


<ZBarSelectButton@Button>:
    popup: None
    on_release:
        self.popup.ids.zbarcam.play = False
        self.popup.dismiss() if self.popup else None
        app.edit_entry(self.text)


<XCameraPopup@Popup>:
    Widget:
        id: proxy
        XCamera:
            id: camera
            play: True
            resolution: 640, 480
            allow_stretch: True
            keep_ratio: True
            center: self.size and proxy.center
            size:
                (proxy.height, proxy.width) if is_android() \
                else (proxy.width, proxy.height)
            icon_color: (0.13, 0.58, 0.95, 0.8)
            icon_size: dp(70)

            resolution: 640, 480 # 1920, 1080
            allow_stretch: True
            directory: app.user_data_dir

            # Android camera rotation workaround, refs:
            # https://github.com/AndreMiras/garden.zbarcam/issues/3
            on_picture_taken:
                app.save_picture(*args)
                root.dismiss()
            canvas.before:
                PushMatrix
                Rotate:
                    angle: -90 if is_android() else 0
                    origin: self.center
            canvas.after:
                PopMatrix

        XCameraIconButton:
            id: shoot_button
            markup: True
            text: "shoot"
            icon_color: camera.icon_color
            icon_size: camera.icon_size
            # position
            right: proxy.width - dp(10)
            center_y: proxy.center_y

            on_release: camera.shoot()

<EntriesScreen@Screen>:
    name: 'entries'
    BoxLayout:
        orientation: 'vertical'
        padding: "10dp"
        spacing: "10dp"
        QRScanButton:
        RecycleView:
            data: app.entries
            RecycleBoxLayout:
                size_hint_y: None
                orientation: 'vertical'
                viewclass: 'EntryRow'
                height: self.minimum_height
                default_size_hint: 1, None
                default_size: 0, '40dp'
        Button:
            text: "export DB"
            size_hint_y: None
            height: "40dp"
            on_press: app.export_db()


<EntryRow>:
    id: ""
    on_release: app.edit_entry(self.id or "")
    Image:
        source: app.picture_for(root.id)
        size_hint_x: None
        width: root.height
    Label:
        text: root.id or ""


<TextFieldEditPopup>:
    index: 0
    name: ""
    value: ""

    BoxLayout:
        orientation: "vertical"
        Label:
            text: "name"
        TextInput:
            id: ti_name
            text: root.name
        
        Label:
            text: "value"
        TextInput:
            id: ti_value
            text: root.value
        
        BoxLayout:
            Button:
                text: 'cancel'
                on_release: root.dismiss()
            Button:
                text: 'save'
                on_release:
                    app.save_text_field(root.index, ti_name.text, ti_value.text)
                    root.dismiss()


<QRScanButton@Button>:
    text: 'scan id'
    size_hint_y: None
    height: "40dp"
    on_release: app.scan_id()


<PictureButton@Button>:
    text: 'picture'
    size_hint_y: None
    height: "40dp"
    on_release: app.snap_picture()

<AddButton@ButtonBehavior+Widget>:
    size_hint: None, None
    size: "40dp", "40dp"
    zoom: 1.0
    on_state:
        A.cancel_all(self, 'zoom')
        A(zoom=1.1 if self.state == 'down' else 1.0, d=.3, t='out_quad').start(self)

    canvas:
        PushMatrix:
        Scale:
            xyz: [self.zoom] * 3
            origin: self.center

        Color:
        Line:
            width: dp(2)
            ellipse: self.pos + self.size
        Line:
            width: dp(2)
            points:
                (
                self.x + dp(10), self.center_y,
                self.right - dp(10), self.center_y
                )
        Line:
            width: dp(2)
            points:
                (
                self.center_x, self.y + dp(10),
                self.center_x, self.top - dp(10)
                )
        PopMatrix:


<EditButton@Button>:
    size_hint_y: None
    width: self.height
    text: 'e'


<DeleteButton@Button>:
    size_hint_y: None
    width: self.height
    text: 'x'


<TextField@BoxLayout>:
    size_hint_y: None
    height: self.minimum_height
    index: 0
    name: ""
    value: ""
    Label:
        text: root.name
        multiline: False
        size_hint_y: None
        height: "38dp"
    Label:
        text: root.value
        size_hint_y: None
        height: "38dp"
        text_size: self.size
        shorten: True

    EditButton:
        on_release: app.edit_text_field(index=root.index)
    DeleteButton:
        on_release: app.remove_text_field(index=root.index)


<EditableEntriesList@RelativeLayout>:
    targe_id: None

    RecycleView:
        data:
            [
            {"index": i, "name": item["name"], "value": item["value"]}
            for i, item in 
            enumerate((app.target_entry or {}).get('text_fields', []))
            ]

        RecycleBoxLayout:
            orientation: "vertical"
            size_hint_y: None
            height: self.minimum_height
            viewclass: 'TextField'
            default_size_hint: 1, None
            default_size: 0, "40dp"

    AddButton:
        on_release: app.edit_text_field()
        pos_hint: {'right': 1, 'y': 0}
        
        
<AppButton@Button>:
    size_hint_y: None
    height: "40dp"

<CancelButton@AppButton>:
    text: "cancel"

<SaveButton@AppButton>:
    text: "save"


<ZoomImagePopup@Popup>:
    BoxLayout:
        orientation: "vertical"
        Widget:
            Scatter:
                size: image.size
                Image:
                    id: image
                    source: app.picture_for((app.target_entry).get("id"))
                    size: self.texture_size
        Button:
            size_hint_y: None
            height: "40dp"
            text: "close"
            on_release: root.dismiss()


<ZoomableImage@ButtonBehavior+Image>:
    on_release: F.ZoomImagePopup().open()


<EntryEditor@Screen>:
    name: "editor"
    item_id: (app.target_entry).get("id", "")

    BoxLayout:
        orientation: "vertical"
        padding: "10dp"
        spacing: "10dp"
        Label:
            text: root.item_id or ""
            size_hint_y: None
            height: self.texture_size[1]

        PictureButton:
            take_picture: picture

        ZoomableImage:
            id: picture
            source: app.picture_for(root.item_id)
            
        EditableEntriesList:
            entries: (app.target_entry).get("text_fields", [])
        BoxLayout:
            spacing: "10dp"
            size_hint_y: None
            height: self.minimum_height
            CancelButton:
                on_release: app.switch_screen("entries")
            SaveButton:
                on_release: app.save()
