# vim: noet ts=4 number nowrap
#:import Path pathlib.Path
#:import datetime datetime.datetime
#:import is_android zbarcam.utils.is_android
#:import wheight settings.wheight
#:import Wheight settings.Wheight
#:import NoTransition kivy.uix.screenmanager.NoTransition
#:import dec enc_dec.dec

<ScreenManager>:
    transition: NoTransition()

ScreenManager:
    EntriesScreen:
    EntryEditor:

<AppButton@Button>:
    size_hint_y: None
    height: wheight

<WaitPopup@Popup>
    Label: 
        text: "Please wait..."

<ZBarCamPopup@Popup>:
    BoxLayout:
        orientation: "vertical"
        ZBarCam:
            id: zbarcam
            on_symbols: app.edit_entry(self.symbols[0], popup = root) if self.symbols else None
        #RecycleView:
        #    viewclass: "ZBarSelectButton"
        #    data: [{"text": value.data.decode("utf8"), "popup": root} for value in zbarcam.symbols]
        #    RecycleBoxLayout:
        #        orientation: 'vertical'
        #        size_hint_y: None
        #        height: self.minimum_height
        #        default_size_hint: 1, None
        #        default_size: 0, wheight

<ZBarCamValuePopup@Popup>:
    BoxLayout:
        orientation: "vertical"
        ZBarCam:
            id: zbarcam
            on_symbols: app.value = self.symbols[0] if self.symbols else None
        #RecycleView:
        #    viewclass: "ZBarSelectValueButton"
        #    data: [{"text": value.data.decode("utf8"), "popup": root} for value in zbarcam.symbols]
        #    RecycleBoxLayout:
        #        orientation: 'vertical'
        #        size_hint_y: None
        #        height: self.minimum_height
        #        default_size_hint: 1, None
        #        default_size: 0, wheight


#<ZBarSelectButton@AppButton>:
#    popup: None
#    on_release:
#        self.popup.ids.zbarcam.play = False
#        self.popup.dismiss() if self.popup else None
#        app.edit_entry(app.sanitize(self.text))
#
#<ZBarSelectValueButton@AppButton>:
#    popup: None
#    on_release:
#        self.popup.ids.zbarcam.play = False
#        self.popup.dismiss() if self.popup else None
#        app.value = app.sanitize(self.text)


<XCameraPopup@Popup>:
    Widget:
        id: proxy
        XCamera:
            id: camera
            play: True
            allow_stretch: True
            keep_ratio: True
            center: self.size and proxy.center
            size:
                (proxy.height, proxy.width) if is_android() \
                else (proxy.width, proxy.height)
            icon_color: (0.13, 0.58, 0.95, 0.8)
            icon_size: dp(70)

            resolution: 640, 480 # 1920, 1080
            allow_stretch: True
            directory: app.user_data_dir

            # Android camera rotation workaround, refs:
            # https://github.com/AndreMiras/garden.zbarcam/issues/3
            on_picture_taken:
                app.save_picture(*args)
                root.dismiss()
            canvas.before:
                PushMatrix
                Rotate:
                    angle: -90 if is_android() else 0
                    origin: self.center
            canvas.after:
                PopMatrix

        XCameraIconButton:
            id: shoot_button
            markup: True
            text: "ðŸ“·"
            icon_color: camera.icon_color
            icon_size: camera.icon_size
            # position
            bottom: proxy.height - dp(10)
            center_x: proxy.center_x

            on_release: camera.shoot()

<EntriesScreen@Screen>:
    name: 'entries'
    BoxLayout:
        orientation: 'vertical'
        #orientation: 'horizontal'
        padding: "10dp"
        spacing: "10dp"
        BoxLayout:
            size_hint_y: None
            height: wheight
            QRScanButton:
            UUIDButton:
        RecycleView:
            data: app.entries
            RecycleBoxLayout:
                size_hint_y: None
                orientation: 'vertical'
                viewclass: 'EntryRow'
                height: self.minimum_height
                default_size_hint: 1, None
                default_size: 0, wheight
        BoxLayout:
            height: wheight
            size_hint_y: None
            DataExportButton:
            ReadPositionButton:

<TypeRow>:
    id: ""
    on_release:
        #print('EDITING ID:' , self.id)
        app.edit_entry(self.id)
    Image:
        source: app.picture_for(root.otype, thumbnail = True, clue='TypeRow thumbail')
        size_hint_x: None
        width: root.height
    Label:
        text: root.otype or ""

<TypeSelPopup>:
    # TODO set title
    BoxLayout:
        orientation: 'vertical'
        padding: "10dp"
        spacing: "10dp"
        RecycleView:
            data: app.preset_types
            RecycleBoxLayout:
                size_hint_y: None
                orientation: 'vertical'
                viewclass: 'TypeRow'
                height: self.minimum_height
                default_size_hint: 1, None
                default_size: 0, wheight
        CancelButton:
            on_release: root.dismiss()


<EntryRow>:
    id: ""
    on_release:
        print('open:' , dec(self.id))
        app.edit_entry(self.id)
    Image:
        source: app.picture_for(root.id, thumbnail = True)#, clue='EntryRow thumbail')
        size_hint_x: None
        width: root.height
    Label:
        text: dec(root.id) or ""


<TextFieldEditPopup>:
    index: 0
    #key: b""
    #value: b""

    BoxLayout:
        orientation: "vertical"

        BoxLayout:
            #spacing: "10dp"
            height: wheight
            size_hint_y: None
            CancelButton:
                on_release: root.dismiss()
            AddAnotherButton:
                on_release:
                    # save this value and reopen this dialog
                    app.save_text_field('Ansuz', root.index, ti_key.text, ti_value.text)
                    root.dismiss()
                    app.edit_text_field()
            SaveButton:
                text: "save + scan"
                on_release:
                    #waitpopup = WaitPopup
                    #waitpopup.open()
                    app.save_text_field('Ansuz', root.index, ti_key.text, ti_value.text) if ti_value.text != '' else None
                    app.save_entry()
                    root.dismiss()
                    # scan new item
                    #waitpopup.dismiss()
                    app.scan_id()

        BoxLayout:
            size_hint_y: None
            height: Wheight
            Button:
                text: "key"
                size_hint: 2, None
                height: Wheight
                # on_release: TODO select from list
                on_release: app.preset_value(ti_key)
            QRScanValueButton:
                on_release: app.scan_value(ti_key)
        TextInput:
            size_hint_y: None
            id: ti_key
            text: dec(root.key)
            height: wheight
        
        BoxLayout:
            size_hint_y: None
            height: Wheight
            Label:
                text: "value"
                size_hint: 2, None
                height: Wheight
                # on_release: TODO select from list
            QRScanValueButton:
                on_release: app.scan_value(ti_value)
        TextInput:
            id: ti_value
            text: dec(root.value)

<QRScanButton@AppButton>:
    text: 'QR scan'
    size_hint: 3, None
    on_release: app.scan_id()
    background_color: (.99,.75,0.25,1)

<UUIDButton@AppButton>:
    text: 'UUID4'
    size_hint: 2, None
    on_release: app.scan_id(get_uuid4=True)
    background_color: (.8,.6,0.15,1)

<QRScanValueButton@AppButton>:
    text: 'QR'
    size_hint_y: None
    height: Wheight
    background_color: (.99,.75,0.25,1)

<DataExportButton@AppButton>:
    text: "export\nDB"
    size_hint: None, None
    width: wheight
    on_release: app.export_db( button = self )    # TODO ask for confirmation

<ReadPositionButton@ToggleButton>:
    text: 'GPS is off' if self.state == 'normal' else 'acquiring satellites...'
    size_hint: 1, None
    height: wheight
    on_state:
        app.GPSstart(1000, 1, self) if self.state == 'down' else \
        app.GPSstop()

#<DeleteEntryButton@AppButton>:
#    text: "delete"
#    background_color: (.2,.2,.2,1)
#    on_release: app.delete_entry()

<CancelButton@AppButton>:
    text: "cancel"
    size_hint_x: 2
    background_color: (1,0,0,1)

<SaveButton@AppButton>:
    text: "save"
    size_hint_x: 2
    background_color: (0,1,0,1)

<AddAnotherButton@AppButton>:
    text: '+k/v'
    size_hint_x: 2
    background_color: (0,1,1,1)

<AddKeyVal@AppButton>:
    text: "+âž•+"
    size_hint_x: 2
    background_color: (0,1,1,1)
    on_release: app.edit_text_field()

<ExternalAppButton@Button>:
    text: 'app...'
    size_hint: 1, None
    height: Wheight
    on_release: app.call_app(self)

<FileChooserButton@Button>:
    text: 'file...'
    size_hint: 1, None
    height: Wheight
    on_release: app.choose_file(self)

#<EditPictureButton@Button>:
#    text: 'edit photo'
#    size_hint: 1, None
#    height: Wheight
#    on_release: print("Not implemented : edit/crop") #TODO see ShareSheet on https://github.com/Android-for-Python/androidstorage4kivy

<PictureButton@Button>:
    text: "ðŸ“· photo"
    size_hint: 3, None
    height: Wheight
    on_release: app.snap_picture()
    background_color: (0,0,1,1)

<AddButton@Button>:
    text: "+k/v"
    size_hint_x: 1

<EditButton@Button>:
    size_hint: None, None
    size: wheight, wheight
    text: 'e'

<DeleteButton@Button>:
    size_hint: None, None
    size: wheight, wheight
    text: 'x'

<TextField@BoxLayout>:
    size_hint_y: None
    height: self.minimum_height
    index: 0
    key: ""
    value: ""
    Label:
        text: root.key
        multiline: False
        size_hint_y: None
        height: wheight
        shorten: True
    Label:
        text: root.value
        size_hint_y: None
        height: wheight
        text_size: self.size
        shorten: True

    EditButton:
        on_release: app.edit_text_field(index=root.index)
    DeleteButton:
        on_release: app.remove_text_field(index=root.index)


<EditableEntriesList@RelativeLayout>:
    target_id: None

    RecycleView:
        data:
            [
            {"index": i, "key": dec(item["key"]), "value": dec(item["value"])}
            for i, item in 
            enumerate((app.target_entry or {}).get('text_fields', []))
            ]

        RecycleBoxLayout:
            orientation: "vertical"
            size_hint_y: None
            height: self.minimum_height
            viewclass: 'TextField'
            default_size_hint: 1, None
            default_size: 0, wheight

<ZoomImagePopup@Popup>:
    BoxLayout:
        orientation: "vertical"
        Widget:
            Scatter:
                size: image.size
                Image:
                    id: image
                    source: app.picture_for((app.target_entry).get("id",b"[ZoomImagePopup]"))#,clue='ZoomImagePopup')
                    size: self.texture_size
        Button:
            size_hint_y: None
            height: wheight
            text: "close"
            on_release: root.dismiss()


<ZoomableImage@ButtonBehavior+Image>:
    # should open the camera when no photo exists.. 
    on_release: app.snap_picture( force = False )


<EntryEditor@Screen>:
    name: "editor"
    item_id: (app.target_entry).get("id", b"[entryeditor]")

    BoxLayout:
        orientation: "vertical"
        padding: "10dp"
        spacing: "10dp"
        Label:
            text: dec(root.item_id) or ""
            size_hint_y: None
            height: self.texture_size[1]

#        Label:
#            text: (app.target_entry).get("otype", "object type")
#            size_hint_y: None
#            height: self.texture_size[1]

        BoxLayout:
            size_hint_y: None
            height: Wheight
            #ExternalAppButton:
            #EditPictureButton:
            PictureButton:
                take_picture: picture
            FileChooserButton:

        ZoomableImage:
            id: picture
            source: app.picture_for(root.item_id)#, clue="ZoomableImage")
            
        EditableEntriesList:
            entries: (app.target_entry).get("text_fields", [])
        BoxLayout:
            #spacing: "10dp"
            size_hint_y: None
            height: self.minimum_height
            #DeleteEntryButton:
            CancelButton:
                on_release:
                    app.switch_screen("entries")
                text: "back to list"
                background_color: (.5,.5,.5)
            SaveButton:
                on_release: app.save_entry()
            AddButton:
                on_release: app.edit_text_field()
        
<ImportDialog>:
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        FileChooserListView:
            id: filechooser

        BoxLayout:
            size_hint_y: None
            height: wheight
            Button:
                text: "Cancel"
                on_release: root.dismiss()

            Button:
                text: "Import"
                on_release: app.import_file(filechooser.path, filechooser.selection, popup=root.popup)

#<SaveDialog>:
#    text_input: text_input
#    BoxLayout:
#        size: root.size
#        pos: root.pos
#        orientation: "vertical"
#        FileChooserListView:
#            id: filechooser
#            on_selection: text_input.text = self.selection and self.selection[0] or ''
#
#        TextInput:
#            id: text_input
#            size_hint_y: None
#            height: wheight
#            multiline: False
#
#        BoxLayout:
#            size_hint_y: None
#            height: 30
#            Button:
#                text: "Cancel"
#                on_release: self.dismiss()
#
#            Button:
#                text: "Save"
#                on_release: root.save(filechooser.path, text_input.text)
#

